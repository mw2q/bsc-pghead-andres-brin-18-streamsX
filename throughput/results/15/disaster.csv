Q21,700548.0,->  Nested Loop Semi Join  (cost=2406.31..2865787.45 rows=1 width=34) (actual time=55.018..44172.732 rows=700548 loops=1)
Q3,317915.6,->  Sort  (cost=2558659.01..2566606.90 rows=3179156 width=20) (actual time=42129.300..42129.302 rows=10 loops=1)
Q18,304723.9,->  GroupAggregate  (cost=10306436.14..11144426.86 rows=30472390 width=39) (actual time=78934.835..78935.166 rows=100 loops=1)
Q18,67433.2,->  Hash Join  (cost=2209414.74..2831660.84 rows=7619962 width=39) (actual time=52057.700..59272.284 rows=113 loops=1)
Q18,67433.2,->  Hash Join  (cost=2140386.74..2648333.41 rows=7619962 width=20) (actual time=51171.866..58385.953 rows=113 loops=1)
Q18,67433.2,->  Hash  (cost=2831660.84..2831660.84 rows=7619962 width=39) (actual time=59272.570..59272.570 rows=113 loops=1)
Q18,43469.8,->  Sort  (cost=10306436.14..10382617.11 rows=30472390 width=39) (actual time=78934.824..78934.861 rows=701 loops=1)
Q21,39550.0,->  Nested Loop Anti Join  (cost=2406.88..2865789.23 rows=1 width=26) (actual time=55.284..47235.716 rows=39550 loops=1)
Q18,38523.8,->  Hash Join  (cost=2926910.37..5685334.80 rows=30472390 width=39) (actual time=59433.105..78933.735 rows=791 loops=1)
Q18,36351.9,->  Hash  (cost=2089039.58..2089039.58 rows=4107773 width=4) (actual time=51069.659..51069.659 rows=113 loops=1)
Q18,36351.9,->  HashAggregate  (cost=1996614.69..2047961.85 rows=4107773 width=8) (actual time=43690.015..51069.361 rows=113 loops=1)
Q9,30596.7,->  Sort  (cost=1016596.16..1016596.43 rows=107 width=46) (actual time=107816.469..108613.846 rows=3273847 loops=1)
Q9,30596.7,->  Nested Loop  (cost=66624.35..1016588.99 rows=107 width=24) (actual time=608.809..97499.934 rows=3273847 loops=1)
Q9,30596.7,->  Nested Loop  (cost=66623.92..1016537.13 rows=107 width=24) (actual time=608.779..57710.012 rows=3273847 loops=1)
Q9,30596.7,->  Nested Loop  (cost=66623.63..1016502.60 rows=107 width=28) (actual time=608.769..45869.123 rows=3273847 loops=1)
Q9,30596.7,->  Hash Join  (cost=66625.92..1016592.55 rows=107 width=46) (actual time=608.857..101274.377 rows=3273847 loops=1)
Q10,28036.9,->  Sort  (cost=2283368.55..2284770.40 rows=560739 width=175) (actual time=42240.246..42240.248 rows=20 loops=1)
Q2,4837.0,->  Merge Join  (cost=465687.75..884280.38 rows=1 width=190) (actual time=7925.620..10757.492 rows=4837 loops=1)
Q21,3973.0,->  HashAggregate  (cost=2865789.24..2865789.25 rows=1 width=26) (actual time=47305.131..47306.246 rows=3973 loops=1)
Q15,3739.0,->  Subquery Scan on revenue15  (cost=1962631.11..1962715.24 rows=3739 width=12) (actual time=51164.666..51165.987 rows=1 loops=1)
Q15,3739.0,->  Sort  (cost=1962937.12..1962946.47 rows=3739 width=12) (actual time=51166.006..51166.007 rows=1 loops=1)
Q15,3739.0,Merge Join  (cost=3908656.39..3913753.67 rows=3739 width=79) (actual time=51188.636..51188.638 rows=1 loops=1)
Q15,3739.0,->  HashAggregate  (cost=1962631.11..1962677.85 rows=3739 width=12) (actual time=51164.666..51165.986 rows=1 loops=1)
Q7,768.0,Sort  (cost=2131500.70..2131508.38 rows=3072 width=64) (actual time=25380.393..25380.393 rows=4 loops=1)
Q7,768.0,->  HashAggregate  (cost=2131276.67..2131322.75 rows=3072 width=64) (actual time=25380.330..25380.338 rows=4 loops=1)
Q8,365.0,Sort  (cost=1742952.65..1742954.47 rows=730 width=38) (actual time=34214.506..34214.506 rows=2 loops=1)
Q8,365.0,->  HashAggregate  (cost=1742905.15..1742917.93 rows=730 width=38) (actual time=34214.466..34214.467 rows=2 loops=1)
Q21,100.0,->  Sort  (cost=2865789.26..2865789.26 rows=1 width=26) (actual time=47307.392..47307.399 rows=100 loops=1)
Q21,100.0,Limit  (cost=2865789.26..2865789.26 rows=1 width=26) (actual time=47307.394..47307.413 rows=100 loops=1)
Q2,100.0,->  Sort  (cost=884280.39..884280.40 rows=1 width=190) (actual time=10767.325..10767.336 rows=100 loops=1)
Q2,100.0,Limit  (cost=884280.39..884280.40 rows=1 width=190) (actual time=10767.327..10767.345 rows=100 loops=1)
Q11,36.8,Sort  (cost=614386.98..615186.98 rows=320000 width=12) (actual time=8957.238..8958.575 rows=8690 loops=1)
Q11,36.8,->  HashAggregate  (cost=292163.31..296163.31 rows=320000 width=12) (actual time=8836.657..8952.243 rows=8690 loops=1)
Q3,28.0,->  HashAggregate  (cost=2458167.03..2489958.59 rows=3179156 width=20) (actual time=42056.627..42108.147 rows=113392 loops=1)
Q15,26.7,->  HashAggregate  (cost=1945634.84..1945672.23 rows=3739 width=12) (actual time=24378.532..24412.482 rows=100000 loops=1)
Q21,15.0,->  Index Scan using pk_lineitem on lineitem l2  (cost=0.56..1.15 rows=15 width=8) (actual time=0.007..0.007 rows=1 loops=726816)
Q14,14.5,->  Bitmap Index Scan on lineitem_l_shipdate_l_suppkey_brin_idx  (cost=0.00..7518.63 rows=737063 width=0) (actual time=132.997..132.997 rows=10708480 loops=1)
Q3,10.6,->  Hash Join  (cost=769180.21..2410479.69 rows=3179156 width=20) (actual time=9630.351..41760.701 rows=299624 loops=1)
Q16,10.2,->  Bitmap Index Scan on part_p_size_brin_idx  (cost=0.00..2396.06 rows=317873 width=0) (actual time=34.771..34.771 rows=3246080 loops=1)
Q9,8.0,->  Index Scan using lineitem_l_partkey_l_quantity_idx on lineitem  (cost=0.56..1.88 rows=1 width=24) (actual time=0.018..0.093 rows=8 loops=435720)
Q8,5.8,->  Bitmap Index Scan on customer_c_nationkey_c_custkey_brin_idx  (cost=0.00..750.00 rows=60000 width=0) (actual time=3.613..3.613 rows=353280 loops=5)
Q5,5.8,->  Bitmap Index Scan on customer_c_nationkey_c_custkey_brin_idx  (cost=0.00..750.00 rows=60000 width=0) (actual time=3.605..3.605 rows=353280 loops=5)
Q2,5.7,->  Bitmap Index Scan on supplier_s_nationkey_s_suppkey_brin_idx  (cost=0.00..330.00 rows=4000 width=0) (actual time=0.241..0.241 rows=23040 loops=5)
Q21,5.7,->  Bitmap Index Scan on supplier_s_nationkey_s_suppkey_brin_idx  (cost=0.00..42.00 rows=4000 width=0) (actual time=0.271..0.271 rows=23040 loops=1)
Q20,5.7,->  Bitmap Index Scan on supplier_s_nationkey_s_suppkey_brin_idx  (cost=0.00..42.00 rows=4000 width=0) (actual time=0.268..0.268 rows=23040 loops=1)
Q11,5.7,->  Bitmap Index Scan on supplier_s_nationkey_s_suppkey_brin_idx  (cost=0.00..42.00 rows=4000 width=0) (actual time=0.270..0.270 rows=23040 loops=1)
Q11,5.7,->  Bitmap Index Scan on supplier_s_nationkey_s_suppkey_brin_idx  (cost=0.00..42.00 rows=4000 width=0) (actual time=0.252..0.252 rows=23040 loops=1)
Q5,5.0,Sort  (cost=2022259.37..2022259.44 rows=25 width=34) (actual time=17229.221..17229.221 rows=5 loops=1)
Q5,5.0,->  HashAggregate  (cost=2022258.54..2022258.79 rows=25 width=34) (actual time=17229.181..17229.182 rows=5 loops=1)
Q4,5.0,Sort  (cost=1506624.85..1506624.85 rows=1 width=16) (actual time=19334.079..19334.079 rows=5 loops=1)
Q4,5.0,->  Index Scan using pk_lineitem on lineitem  (cost=0.56..7.07 rows=5 width=4) (actual time=0.015..0.015 rows=1 loops=574439)
Q4,5.0,->  HashAggregate  (cost=1506624.83..1506624.84 rows=1 width=16) (actual time=19334.037..19334.038 rows=5 loops=1)
Q21,5.0,->  Index Scan using pk_lineitem on lineitem l3  (cost=0.56..1.15 rows=5 width=8) (actual time=0.004..0.004 rows=1 loops=700548)
Q4,4.4,->  Bitmap Index Scan on orders_o_orderkey_o_orderdate_brin_idx  (cost=0.00..5886.00 rows=584600 width=0) (actual time=46.206..46.206 rows=2574080 loops=1)
Q10,4.4,->  Bitmap Index Scan on orders_o_orderkey_o_orderdate_brin_idx  (cost=0.00..5749.98 rows=570998 width=0) (actual time=27.531..27.531 rows=2548480 loops=1)
Q13,4.3,Sort  (cost=855680.09..855680.59 rows=200 width=8) (actual time=31019.551..31019.555 rows=46 loops=1)
Q13,4.3,->  HashAggregate  (cost=855670.45..855672.45 rows=200 width=8) (actual time=31019.480..31019.489 rows=46 loops=1)
Q7,4.0,->  Index Scan using pk_lineitem on lineitem  (cost=0.56..1.27 rows=4 width=20) (actual time=0.010..0.011 rows=1 loops=1199611)
Q5,3.7,->  Index Scan using pk_lineitem on lineitem  (cost=0.56..3.02 rows=15 width=16) (actual time=0.015..0.017 rows=4 loops=454769)
Q17,3.6,->  Nested Loop  (cost=82.47..112783.25 rows=19854 width=4) (actual time=1.648..265.895 rows=5426 loops=1)
Q15,3.4,->  Bitmap Index Scan on lineitem_l_shipdate_l_suppkey_brin_idx  (cost=0.00..282105.86 rows=37594382 width=0) (actual time=242.475..242.475 rows=10771200 loops=1)
Q15,3.4,->  Bitmap Index Scan on lineitem_l_shipdate_l_suppkey_brin_idx  (cost=0.00..282105.86 rows=37594382 width=0) (actual time=119.724..119.724 rows=10764800 loops=1)
Q4,3.3,->  Nested Loop Semi Join  (cost=6032.71..1505836.96 rows=157573 width=16) (actual time=46.399..19038.709 rows=526855 loops=1)
Q17,3.3,->  Index Scan using lineitem_l_partkey_l_quantity_idx on lineitem  (cost=9.76..53.60 rows=10 width=12) (actual time=0.024..0.062 rows=3 loops=1993)
Q3,3.0,->  Bitmap Index Scan on lineitem_l_shipdate_l_suppkey_brin_idx  (cost=0.00..246362.12 rows=32828549 width=0) (actual time=132.391..132.391 rows=10760960 loops=1)
Q20,3.0,->  Index Scan using pk_partsupp on partsupp  (cost=0.43..528.29 rows=1 width=8) (actual time=0.494..0.581 rows=3 loops=21473)
Q3,2.8,->  Bitmap Index Scan on orders_o_orderkey_o_orderdate_brin_idx  (cost=0.00..55049.50 rows=7334600 width=0) (actual time=44.569..44.569 rows=2558720 loops=1)
Q22,2.3,Sort  (cost=697496.84..697496.85 rows=3 width=20) (actual time=9902.580..9902.581 rows=7 loops=1)
Q22,2.3,->  HashAggregate  (cost=644686.48..644686.52 rows=3 width=20) (actual time=9902.535..9902.535 rows=7 loops=1)
Q2,2.0,->  Nested Loop  (cost=0.86..48.83 rows=1 width=4) (actual time=0.050..0.074 rows=2 loops=6538)
Q19,2.0,->  Bitmap Index Scan on part_p_size_brin_idx  (cost=0.00..2000.00 rows=198800 width=0) (actual time=4.167..4.167 rows=405760 loops=1)
Q16,2.0,->  Sort  (cost=403078.71..404554.25 rows=590216 width=40) (actual time=12576.731..12745.055 rows=1187456 loops=1)
Q16,2.0,->  Hash Join  (cost=54643.74..346503.90 rows=590216 width=40) (actual time=1977.247..8840.176 rows=1187456 loops=1)
Q15,2.0,->  Index Scan using pk_supplier on supplier  (cost=0.29..4791.49 rows=100000 width=71) (actual time=0.024..17.328 rows=47970 loops=1)
Q12,2.0,Sort  (cost=3038097.82..3038097.82 rows=1 width=27) (actual time=36453.315..36453.315 rows=2 loops=1)
Q12,2.0,->  HashAggregate  (cost=3038097.80..3038097.81 rows=1 width=27) (actual time=36453.264..36453.265 rows=2 loops=1)
Q10,2.0,->  Hash Join  (cost=345411.74..2248821.62 rows=560739 width=175) (actual time=14169.709..39665.903 rows=1147523 loops=1)
Q10,2.0,->  Hash Join  (cost=345410.18..2241109.90 rows=560739 width=153) (actual time=14169.678..39198.992 rows=1147523 loops=1)
Q10,2.0,->  Hash Join  (cost=276382.18..2163670.81 rows=560739 width=12) (actual time=11937.668..36098.697 rows=1147523 loops=1)
Q20,1.9,->  Nested Loop  (cost=754.48..11668629.61 rows=29587 width=4) (actual time=13.301..12786.231 rows=58343 loops=1)
Q20,1.9,->  Hash  (cost=11668629.61..11668629.61 rows=29587 width=4) (actual time=12828.870..12828.870 rows=58343 loops=1)
Q16,1.9,->  Seq Scan on partsupp  (cost=16.23..270974.23 rows=4000000 width=8) (actual time=0.393..5209.004 rows=7995520 loops=1)
Q21,1.8,->  Seq Scan on lineitem l1  (cost=0.00..1829722.84 rows=20154876 width=8) (actual time=0.014..21649.213 rows=37965693 loops=1)
Q21,1.8,->  Nested Loop  (cost=2405.75..2340200.49 rows=393329 width=38) (actual time=54.930..38296.973 rows=726816 loops=1)
Q21,1.8,->  Hash Join  (cost=2405.31..1915770.89 rows=806195 width=34) (actual time=54.877..29590.014 rows=1506776 loops=1)
Q16,1.7,->  Index Scan using supplier_s_suppkey_idx_like on supplier  (cost=0.14..15.98 rows=100 width=4) (actual time=0.040..0.352 rows=56 loops=1)
Q9,1.6,GroupAggregate  (cost=1016596.16..1016599.91 rows=107 width=46) (actual time=107826.323..111286.964 rows=175 loops=1)
Q1,1.5,Sort  (cost=4218653.41..4218653.43 rows=6 width=20) (actual time=95192.177..95192.178 rows=4 loops=1)
Q1,1.5,->  HashAggregate  (cost=4218653.23..4218653.33 rows=6 width=20) (actual time=95192.128..95192.130 rows=4 loops=1)
Q20,1.4,Sort  (cost=11671443.24..11671446.20 rows=1183 width=51) (actual time=12860.944..12861.039 rows=1738 loops=1)
Q20,1.4,->  Hash Semi Join  (cost=11669042.45..11671382.86 rows=1183 width=51) (actual time=12829.326..12859.509 rows=1738 loops=1)
Q19,1.4,->  Bitmap Index Scan on part_p_size_brin_idx  (cost=0.00..5978.67 rows=596667 width=0) (actual time=4.154..4.154 rows=405760 loops=1)
Q10,1.4,->  HashAggregate  (cost=2262840.10..2268447.49 rows=560739 width=175) (actual time=41838.963..42098.373 rows=381926 loops=1)
Q22,1.3,->  Bitmap Index Scan on customer_c_phone_idx  (cost=0.00..2867.51 rows=139248 width=0) (actual time=706.278..706.278 rows=190471 loops=1)
Q22,1.3,->  Bitmap Heap Scan on customer  (cost=2902.33..41835.59 rows=139248 width=24) (actual time=715.340..1174.041 rows=190471 loops=1)
Q9,1.2,->  Seq Scan on part  (cost=0.00..65522.00 rows=88085 width=4) (actual time=0.012..577.796 rows=108930 loops=1)
Q9,1.2,->  Hash Join  (cost=66623.06..351104.46 rows=352340 width=16) (actual time=608.675..4321.948 rows=435720 loops=1)
Q9,1.2,->  Hash  (cost=65522.00..65522.00 rows=88085 width=4) (actual time=608.159..608.159 rows=108930 loops=1)
Q6,1.1,->  Bitmap Index Scan on lineitem_l_shipdate_l_suppkey_brin_idx  (cost=0.00..92148.05 rows=9200005 width=0) (actual time=137.296..137.296 rows=10728960 loops=1)
Q8,1.0,->  Nested Loop  (cost=766.08..34580.15 rows=300000 width=4) (actual time=3.701..2193.734 rows=299838 loops=1)
Q8,1.0,->  Nested Loop  (cost=421.93..1694972.31 rows=123041 width=20) (actual time=7.683..31514.119 rows=121105 loops=1)
Q8,1.0,->  Nested Loop  (cost=421.49..1496320.48 rows=405708 width=16) (actual time=7.135..24566.284 rows=396925 loops=1)
Q8,1.0,->  Nested Loop  (cost=38752.37..1741950.03 rows=24608 width=16) (actual time=2300.443..34108.938 rows=24282 loops=1)
Q8,1.0,->  Hash Join  (cost=38753.93..1742412.99 rows=24608 width=38) (actual time=2300.495..34160.174 rows=24282 loops=1)
Q8,1.0,->  Hash Join  (cost=38752.07..1734009.94 rows=24608 width=16) (actual time=2300.432..33929.621 rows=24282 loops=1)
Q8,1.0,->  Hash  (cost=34580.15..34580.15 rows=300000 width=4) (actual time=2289.856..2289.856 rows=299838 loops=1)
Q8,1.0,->  Bitmap Index Scan on part_p_type_p_partkey_idx  (cost=0.00..413.48 rows=13473 width=0) (actual time=4.797..4.797 rows=13207 loops=1)
Q8,1.0,->  Bitmap Index Scan on lineitem_l_partkey_l_quantity_idx  (cost=0.00..4.64 rows=31 width=0) (actual time=0.030..0.030 rows=30 loops=13207)
Q8,1.0,->  Bitmap Heap Scan on part  (cost=416.84..28291.02 rows=13473 width=4) (actual time=7.034..251.712 rows=13207 loops=1)
Q8,1.0,->  Bitmap Heap Scan on lineitem  (cost=4.65..108.65 rows=31 width=20) (actual time=0.122..1.754 rows=30 loops=13207)
Q8,1.0,->  Bitmap Heap Scan on customer  (cost=765.00..6315.54 rows=60000 width=8) (actual time=3.646..429.413 rows=59968 loops=5)
Q7,1.0,->  Seq Scan on orders  (cost=0.00..406897.75 rows=15134975 width=8) (actual time=0.006..3338.143 rows=15015000 loops=1)
Q7,1.0,->  Nested Loop  (cost=58604.97..2118436.65 rows=1472690 width=42) (actual time=635.630..24484.041 rows=1455971 loops=1)
Q7,1.0,->  Hash Join  (cost=62340.37..2130357.37 rows=61287 width=64) (actual time=680.400..25284.100 rows=58229 loops=1)
Q7,1.0,->  Hash Join  (cost=58604.40..534366.29 rows=1210798 width=30) (actual time=635.607..10445.564 rows=1199611 loops=1)
Q7,1.0,->  Hash Join  (cost=1.40..57104.40 rows=120000 width=30) (actual time=0.040..596.127 rows=120053 loops=1)
Q7,1.0,->  Hash Join  (cost=1.40..3635.40 rows=8000 width=30) (actual time=0.034..42.435 rows=8018 loops=1)
Q7,1.0,->  Hash  (cost=57104.40..57104.40 rows=120000 width=30) (actual time=635.086..635.086 rows=120053 loops=1)
Q7,1.0,->  Hash  (cost=3635.40..3635.40 rows=8000 width=30) (actual time=44.704..44.704 rows=8018 loops=1)
Q6,1.0,->  Bitmap Heap Scan on lineitem  (cost=92340.11..1372194.23 rows=768260 width=8) (actual time=138.077..35085.907 rows=761642 loops=1)
Q5,1.0,->  Seq Scan on orders  (cost=0.00..484005.91 rows=2313071 width=8) (actual time=0.012..4797.232 rows=2277983 loops=1)
Q5,1.0,->  Nested Loop  (cost=765.14..34591.63 rows=300000 width=38) (actual time=3.697..1987.103 rows=299838 loops=1)
Q5,1.0,->  Nested Loop  (cost=38342.20..2002224.47 rows=1850012 width=46) (actual time=2104.346..16251.571 rows=1817271 loops=1)
Q5,1.0,->  Hash Join  (cost=43021.20..2021518.55 rows=73999 width=34) (actual time=2166.891..17142.484 rows=73017 loops=1)
Q5,1.0,->  Hash Join  (cost=38341.63..535647.69 rows=462614 width=38) (actual time=2104.323..8015.031 rows=454769 loops=1)
Q5,1.0,->  Hash  (cost=34591.63..34591.63 rows=300000 width=38) (actual time=2101.918..2101.918 rows=299838 loops=1)
Q5,1.0,->  Bitmap Heap Scan on customer  (cost=765.00..6315.54 rows=60000 width=8) (actual time=3.636..387.668 rows=59968 loops=5)
Q4,1.0,->  Bitmap Heap Scan on orders  (cost=6032.15..272121.15 rows=584600 width=20) (actual time=46.374..9862.679 rows=574439 loops=1)
Q3,1.0,->  Hash Join  (cost=106612.05..496271.70 rows=1467140 width=12) (actual time=805.858..8840.778 rows=1451484 loops=1)
Q3,1.0,->  Hash  (cost=496271.70..496271.70 rows=1467140 width=12) (actual time=9486.870..9486.870 rows=1451484 loops=1)
Q3,1.0,->  Hash  (cost=45978.34..45978.34 rows=300045 width=4) (actual time=758.574..758.574 rows=300441 loops=1)
Q3,1.0,->  Bitmap Index Scan on customer_c_mktsegment_c_custkey_idx  (cost=0.00..6874.76 rows=300045 width=0) (actual time=133.148..133.148 rows=300441 loops=1)
Q3,1.0,->  Bitmap Heap Scan on orders  (cost=56883.15..404366.65 rows=7334600 width=16) (actual time=44.747..5040.619 rows=7259743 loops=1)
Q3,1.0,->  Bitmap Heap Scan on lineitem  (cost=254569.26..1740970.12 rows=32828549 width=12) (actual time=133.148..25857.112 rows=32514162 loops=1)
Q3,1.0,->  Bitmap Heap Scan on customer  (cost=6949.78..45978.34 rows=300045 width=4) (actual time=142.287..659.531 rows=300441 loops=1)
Q22,1.0,->  Seq Scan on orders  (cost=0.00..408106.27 rows=15179927 width=4) (actual time=0.014..4035.346 rows=15015000 loops=1)
Q22,1.0,->  Hash  (cost=408106.27..408106.27 rows=15179927 width=4) (actual time=8485.939..8485.939 rows=15015000 loops=1)
Q22,1.0,->  Hash Anti Join  (cost=600757.68..644244.91 rows=58876 width=20) (actual time=9281.452..9874.869 rows=63410 loops=1)
Q22,1.0,->  Bitmap Index Scan on customer_c_phone_idx_c_acctbal  (cost=0.00..6516.02 rows=379871 width=0) (actual time=87.478..87.478 rows=381752 loops=1)
Q22,1.0,->  Bitmap Heap Scan on customer customer_1  (cost=6610.99..51860.60 rows=379871 width=4) (actual time=96.334..572.726 rows=381752 loops=1)
Q21,1.0,->  Nested Loop  (cost=43.00..2355.31 rows=4000 width=30) (actual time=0.303..53.693 rows=3973 loops=1)
Q21,1.0,->  Hash  (cost=2355.31..2355.31 rows=4000 width=30) (actual time=54.815..54.815 rows=3973 loops=1)
Q21,1.0,->  Bitmap Heap Scan on supplier  (cost=43.00..2314.00 rows=4000 width=34) (actual time=0.287..52.991 rows=3973 loops=1)
Q2,1.0,->  Sort  (cost=465687.32..469687.32 rows=1600000 width=168) (actual time=7925.184..8059.554 rows=1604032 loops=1)
Q2,1.0,->  Nested Loop  (cost=332.07..3602.20 rows=20000 width=164) (actual time=0.307..149.961 rows=20051 loops=1)
Q2,1.0,->  Index Scan using pk_part on part  (cost=0.43..102473.43 rows=7884 width=30) (actual time=0.155..1783.352 rows=8044 loops=1)
Q2,1.0,->  Hash Join  (cost=3852.20..300810.20 rows=1600000 width=168) (actual time=161.952..6587.313 rows=1604080 loops=1)
Q2,1.0,->  Hash  (cost=3602.20..3602.20 rows=20000 width=164) (actual time=161.812..161.812 rows=20051 loops=1)
Q2,1.0,->  Bitmap Heap Scan on supplier  (cost=331.00..679.95 rows=4000 width=142) (actual time=0.252..29.072 rows=4010 loops=5)
Q20,1.0,->  Nested Loop  (cost=43.00..2355.31 rows=4000 width=55) (actual time=0.301..28.679 rows=3974 loops=1)
Q20,1.0,->  Bitmap Index Scan on part_p_name_idx  (cost=0.00..748.54 rows=19999 width=0) (actual time=8.854..8.854 rows=21473 loops=1)
Q20,1.0,->  Bitmap Heap Scan on supplier  (cost=43.00..2314.00 rows=4000 width=59) (actual time=0.283..28.110 rows=3974 loops=1)
Q20,1.0,->  Bitmap Heap Scan on part  (cost=754.05..34890.33 rows=22021 width=4) (actual time=12.514..287.566 rows=21473 loops=1)
Q19,1.0,->  Nested Loop  (cost=12828.18..612412.16 rows=1146 width=8) (actual time=36.979..2385.222 rows=1140 loops=1)
Q19,1.0,->  Bitmap Index Scan on part_p_size_brin_idx  (cost=0.00..3987.87 rows=397587 width=0) (actual time=4.155..4.155 rows=405760 loops=1)
Q19,1.0,->  Bitmap Index Scan on part_p_container_p_brand_p_partkey_idx  (cost=0.00..291.11 rows=8138 width=0) (actual time=3.728..3.728 rows=8040 loops=1)
Q19,1.0,->  Bitmap Index Scan on part_p_container_p_brand_p_partkey_idx  (cost=0.00..289.07 rows=7935 width=0) (actual time=3.755..3.755 rows=7928 loops=1)
Q19,1.0,->  Bitmap Index Scan on part_p_container_p_brand_p_partkey_idx  (cost=0.00..272.51 rows=7880 width=0) (actual time=3.597..3.597 rows=8077 loops=1)
Q19,1.0,->  Bitmap Heap Scan on part  (cost=12827.61..26516.00 rows=4754 width=30) (actual time=33.164..411.767 rows=4912 loops=1)
Q18,1.0,->  Seq Scan on orders  (cost=0.00..409719.23 rows=15239923 width=16) (actual time=0.006..3384.095 rows=15015000 loops=1)
Q18,1.0,->  Seq Scan on lineitem lineitem_1  (cost=0.00..1691890.79 rows=60944779 width=8) (actual time=0.005..10409.075 rows=60044616 loops=1)
Q18,1.0,->  Seq Scan on lineitem  (cost=0.00..1691890.79 rows=60944779 width=8) (actual time=0.041..7889.034 rows=60044616 loops=1)
Q17,1.0,->  Index Only Scan using lineitem_l_partkey_l_quantity_idx on lineitem lineitem_1  (cost=0.56..9.11 rows=31 width=4) (actual time=0.029..0.051 rows=30 loops=1993)
Q17,1.0,->  Index Only Scan using lineitem_l_partkey_l_quantity_idx on lineitem lineitem_1  (cost=0.56..9.11 rows=31 width=4) (actual time=0.029..0.051 rows=30 loops=1993)
Q17,1.0,->  Bitmap Index Scan on part_p_container_p_brand_p_partkey_idx  (cost=0.00..72.21 rows=1978 width=0) (actual time=0.948..0.948 rows=1993 loops=1)
Q17,1.0,->  Bitmap Heap Scan on part  (cost=72.70..6561.78 rows=1978 width=4) (actual time=1.266..16.667 rows=1993 loops=1)
Q16,1.0,Sort  (cost=412774.33..412843.50 rows=27667 width=40) (actual time=13408.706..13412.075 rows=27840 loops=1)
Q16,1.0,->  Hash  (cost=50938.66..50938.66 rows=295108 width=40) (actual time=1974.899..1974.899 rows=297030 loops=1)
Q16,1.0,->  GroupAggregate  (cost=403078.71..410733.08 rows=27667 width=40) (actual time=12576.793..13348.960 rows=27840 loops=1)
Q16,1.0,->  Bitmap Heap Scan on part  (cost=2469.83..50938.66 rows=295108 width=40) (actual time=34.823..1825.654 rows=297030 loops=1)
Q15,1.0,->  Bitmap Heap Scan on lineitem lineitem_1  (cost=282672.41..1922973.14 rows=2266170 width=12) (actual time=243.243..22204.508 rows=2242507 loops=1)
Q15,1.0,->  Bitmap Heap Scan on lineitem  (cost=282672.41..1922973.14 rows=2266170 width=12) (actual time=120.508..24487.766 rows=2242507 loops=1)
Q14,1.0,->  Hash Join  (cost=93224.89..1131480.72 rows=737063 width=29) (actual time=2066.839..42670.518 rows=749914 loops=1)
Q14,1.0,->  Bitmap Heap Scan on lineitem  (cost=7702.89..1034902.77 rows=737063 width=12) (actual time=133.896..39709.763 rows=749914 loops=1)
Q13,1.0,->  Seq Scan on orders  (cost=0.00..447376.99 rows=15088273 width=8) (actual time=0.018..7776.087 rows=14853721 loops=1)
Q13,1.0,->  Hash Right Join  (cost=69028.00..742729.08 rows=15088273 width=8) (actual time=1246.011..19583.600 rows=15353743 loops=1)
Q12,1.0,->  Seq Scan on orders  (cost=0.00..405686.04 rows=15089904 width=20) (actual time=0.013..4580.222 rows=15000000 loops=1)
Q12,1.0,->  Seq Scan on lineitem  (cost=0.00..2429563.44 rows=291785 width=15) (actual time=0.070..25660.349 rows=310581 loops=1)
Q12,1.0,->  Hash Join  (cost=594309.84..3032991.56 rows=291785 width=27) (actual time=10014.579..36103.728 rows=310581 loops=1)
Q12,1.0,->  Hash  (cost=405686.04..405686.04 rows=15089904 width=20) (actual time=9928.083..9928.083 rows=15000000 loops=1)
Q11,1.0,->  Nested Loop  (cost=43.00..2355.31 rows=4000 width=4) (actual time=0.307..49.178 rows=4054 loops=1)
Q11,1.0,->  Nested Loop  (cost=43.00..2355.31 rows=4000 width=4) (actual time=0.292..24.308 rows=4054 loops=1)
Q11,1.0,->  Hash Join  (cost=2405.31..286563.31 rows=320000 width=8) (actual time=25.255..4301.572 rows=324320 loops=1)
Q11,1.0,->  Hash Join  (cost=2405.31..286563.31 rows=320000 width=12) (actual time=50.365..4168.464 rows=324320 loops=1)
Q11,1.0,->  Hash  (cost=2355.31..2355.31 rows=4000 width=4) (actual time=50.291..50.291 rows=4054 loops=1)
Q11,1.0,->  Hash  (cost=2355.31..2355.31 rows=4000 width=4) (actual time=25.205..25.205 rows=4054 loops=1)
Q11,1.0,->  Bitmap Heap Scan on supplier supplier_1  (cost=43.00..2314.00 rows=4000 width=8) (actual time=0.270..23.645 rows=4054 loops=1)
Q11,1.0,->  Bitmap Heap Scan on supplier  (cost=43.00..2314.00 rows=4000 width=8) (actual time=0.288..48.483 rows=4054 loops=1)
Q1,1.0,->  Seq Scan on lineitem  (cost=0.00..1838773.35 rows=59496997 width=20) (actual time=0.015..20571.415 rows=58750312 loops=1)
Q10,1.0,->  Seq Scan on lineitem  (cost=0.00..1826110.80 rows=14818785 width=12) (actual time=0.011..20400.808 rows=14823276 loops=1)
Q10,1.0,->  Hash  (cost=269244.70..269244.70 rows=570998 width=8) (actual time=11932.728..11932.728 rows=574360 loops=1)
Q10,1.0,->  Bitmap Heap Scan on orders  (cost=5892.73..269244.70 rows=570998 width=8) (actual time=27.694..11647.968 rows=574360 loops=1)
Q8,,->  Index Scan using pk_orders on orders  (cost=0.43..0.48 rows=1 width=12) (actual time=0.016..0.016 rows=0 loops=396925)
Q21,,->  Index Scan using pk_orders on orders  (cost=0.43..0.52 rows=1 width=4) (actual time=0.005..0.005 rows=0 loops=1506776)
Q19,,->  Index Scan using lineitem_l_partkey_l_quantity_idx on lineitem  (cost=0.56..123.23 rows=1 width=16) (actual time=0.363..0.400 rows=0 loops=4912)
Q19,,->  BitmapOr  (cost=12827.61..12827.61 rows=4757 width=0) (actual time=29.333..29.333 rows=0 loops=1)
Q19,,->  BitmapAnd  (cost=6253.81..6253.81 rows=2351 width=0) (actual time=8.435..8.435 rows=0 loops=1)
Q19,,->  BitmapAnd  (cost=4281.61..4281.61 rows=1618 width=0) (actual time=8.621..8.621 rows=0 loops=1)
Q19,,->  BitmapAnd  (cost=2291.70..2291.70 rows=789 width=0) (actual time=8.655..8.655 rows=0 loops=1)
